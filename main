#include <vector>
#include <iostream>
#include <algorithm>
#include <string>
#include <unordered_map>
#include <set>
using namespace std;

//==================
bool cmp(pair<string, int>& a, pair<string,int>& b)
{
    return a.second > b.second || (a.second == b.second && a.first < b.first);
};
//==================
int main()
{
    string per; cin >> per;
    unordered_map<string,int> mp1;
    unordered_map<string, set<string>> mp2;
    unordered_map<string, set<string>> mp3;
    string tmp;
    while(cin >> tmp && tmp != "organization")
    {
        int index = 0;
        for(int i = 0; i < tmp.size(); i++)
        {
            if(tmp[i] == ',')
            {
                index = i; break;
            }
        }
        string temp1 = tmp.substr(0, index);
        string temp2 = tmp.substr(index+1);
        mp1.insert({temp1, atoi(temp2.c_str())});
    }
    while(cin >> tmp && tmp != "eof")
    {
        int index1 = 0, index2 = 0;
        int flag = 0;
        for(int i = 0; i < tmp.size(); i++)
        {
            if(tmp[i] == ',' && flag == 0)
            {
                index1 = i;
                flag = 1;
            }
            else if(tmp[i] == ',')
            {
                index2 = i;
                break;
            }
        }
        string temp1 = tmp.substr(0, index1);
        string temp2 = tmp.substr(index1+1, index2 - index1 - 1);
        string temp3 = tmp.substr(index2+1);
        mp2[temp1].insert(temp2);
        mp3[temp2].insert(temp3);
    }
    //==================
    vector<pair<string, int>> v1;
    vector<pair<string, int>> v2;
    vector<pair<string, int>> v3;

    for(auto it : mp1)
    {
        v1.push_back({it.first, it.second});
    }
    //==================
    for(auto it : mp3)
    {
        string temp1 = it.first;
        int sum = 0;
        for(auto it2 : it.second)
        {
            sum += mp1[it2];
        }
        mp1[temp1] =  sum;
    }
    for(auto it : mp2)
    {
        string temp1 = it.first;
        int sum = 0;
        for(auto it2 : it.second)
        {
            sum += mp1[it2];
        }
        mp1[temp1] =sum;
    }
    //==================
    for(auto it : mp2)
    {
        v2.push_back({it.first, mp1[it.first]});
    }
    for(auto it : mp3)
    {
        v3.push_back({it.first, mp1[it.first]});
    }
    sort(v1.begin(), v1.end(), cmp);
    sort(v2.begin(), v2.end(), cmp);
    sort(v3.begin(), v3.end(), cmp);
    //==================
    for(auto it : v2)
    {
        cout << it.first << "<" << it.second << ">" << endl;
        for(auto it2 : v3)
        {
            if(mp2[it.first].find(it2.first) != mp2[it.first].end())
            {
                cout << "-" << it2.first << "<" << mp1[it2.first] << ">" << endl;
                for(auto it3 : v1)
                {
                    if(mp3[it2.first].find(it3.first) != mp3[it2.first].end())
                    {
                        cout << "--" << it3.first << "<" << mp1[it3.first] << ">" << endl;
                    }
                }
            }
        }
    }
    //==================
    return 0;
}
